/* tslint:disable */
/* eslint-disable */
/**
 * api server
 * This is api server
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CocktailIngredientWithoutIDInRequest
 */
export interface CocktailIngredientWithoutIDInRequest {
    /**
     * 
     * @type {string}
     * @memberof CocktailIngredientWithoutIDInRequest
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof CocktailIngredientWithoutIDInRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CocktailIngredientWithoutIDInResponse
 */
export interface CocktailIngredientWithoutIDInResponse {
    /**
     * 
     * @type {string}
     * @memberof CocktailIngredientWithoutIDInResponse
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof CocktailIngredientWithoutIDInResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CocktailPhotoWithIDInRequest
 */
export interface CocktailPhotoWithIDInRequest {
    /**
     * 
     * @type {number}
     * @memberof CocktailPhotoWithIDInRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CocktailPhotoWithIDInRequest
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface CocktailPhotoWithIDInResponse
 */
export interface CocktailPhotoWithIDInResponse {
    /**
     * 
     * @type {number}
     * @memberof CocktailPhotoWithIDInResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CocktailPhotoWithIDInResponse
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface CocktailStepWithoutIDInRequest
 */
export interface CocktailStepWithoutIDInRequest {
    /**
     * 
     * @type {string}
     * @memberof CocktailStepWithoutIDInRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CocktailStepWithoutIDInResponse
 */
export interface CocktailStepWithoutIDInResponse {
    /**
     * 
     * @type {string}
     * @memberof CocktailStepWithoutIDInResponse
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CollectArticleRequest
 */
export interface CollectArticleRequest {
    /**
     * cocktail id
     * @type {number}
     * @memberof CollectArticleRequest
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface Coordinate
 */
export interface Coordinate {
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof Coordinate
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface DeleteDraftArticleRequest
 */
export interface DeleteDraftArticleRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteDraftArticleRequest
     */
    'deleted_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DeleteFavoriteCocktailResponse
 */
export interface DeleteFavoriteCocktailResponse {
    /**
     * 
     * @type {string}
     * @memberof DeleteFavoriteCocktailResponse
     */
    'command_id': string;
}
/**
 * 
 * @export
 * @interface DeleteFormalArticleRequest
 */
export interface DeleteFormalArticleRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeleteFormalArticleRequest
     */
    'deleted_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface DraftCocktailList
 */
export interface DraftCocktailList {
    /**
     * 
     * @type {number}
     * @memberof DraftCocktailList
     */
    'cocktail_id': number;
    /**
     * 
     * @type {string}
     * @memberof DraftCocktailList
     */
    'created_date': string;
    /**
     * 
     * @type {string}
     * @memberof DraftCocktailList
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DraftCocktailList
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof DraftCocktailList
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface FavoriteCocktail
 */
export interface FavoriteCocktail {
    /**
     * 
     * @type {number}
     * @memberof FavoriteCocktail
     */
    'cocktail_id': number;
    /**
     * 
     * @type {boolean}
     * @memberof FavoriteCocktail
     */
    'is_collected': boolean;
    /**
     * 
     * @type {string}
     * @memberof FavoriteCocktail
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteCocktail
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FavoriteCocktail
     */
    'user_name': string;
}
/**
 * 
 * @export
 * @interface GetCocktail200Response
 */
export interface GetCocktail200Response {
    /**
     * 
     * @type {GetPopularCocktailListResponse}
     * @memberof GetCocktail200Response
     */
    'data': GetPopularCocktailListResponse;
    /**
     * 
     * @type {string}
     * @memberof GetCocktail200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktail200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetCocktailByIDRequest
 */
export interface GetCocktailByIDRequest {
    /**
     * ID of an cocktail item  In: path
     * @type {number}
     * @memberof GetCocktailByIDRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetCocktailByIDRequest200Response
 */
export interface GetCocktailByIDRequest200Response {
    /**
     * 
     * @type {GetCocktailByIDResponse}
     * @memberof GetCocktailByIDRequest200Response
     */
    'data': GetCocktailByIDResponse;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDRequest200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDRequest200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetCocktailByIDResponse
 */
export interface GetCocktailByIDResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCocktailByIDResponse
     */
    'cocktail_id': number;
    /**
     * 座標 [左上XY, 右下XY]
     * @type {Array<Coordinate>}
     * @memberof GetCocktailByIDResponse
     */
    'coordinate': Array<Coordinate>;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDResponse
     */
    'created_date': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDResponse
     */
    'description': string;
    /**
     * 原圖長
     * @type {number}
     * @memberof GetCocktailByIDResponse
     */
    'height': number;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInResponse>}
     * @memberof GetCocktailByIDResponse
     */
    'ingredient_list': Array<CocktailIngredientWithoutIDInResponse>;
    /**
     * 
     * @type {boolean}
     * @memberof GetCocktailByIDResponse
     */
    'is_collected': boolean;
    /**
     * 
     * @type {Array<CocktailPhotoWithIDInResponse>}
     * @memberof GetCocktailByIDResponse
     */
    'photos': Array<CocktailPhotoWithIDInResponse>;
    /**
     * 旋轉角度
     * @type {number}
     * @memberof GetCocktailByIDResponse
     */
    'rotation': number;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInResponse>}
     * @memberof GetCocktailByIDResponse
     */
    'step_list': Array<CocktailStepWithoutIDInResponse>;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDResponse
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof GetCocktailByIDResponse
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDResponse
     */
    'user_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailByIDResponse
     */
    'user_photo': string;
    /**
     * 原圖寬
     * @type {number}
     * @memberof GetCocktailByIDResponse
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface GetCocktailDraft200Response
 */
export interface GetCocktailDraft200Response {
    /**
     * 
     * @type {GetDraftCocktailListResponse}
     * @memberof GetCocktailDraft200Response
     */
    'data': GetDraftCocktailListResponse;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraft200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraft200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetCocktailDraftByIDRequest
 */
export interface GetCocktailDraftByIDRequest {
    /**
     * ID of an cocktail item  In: path
     * @type {number}
     * @memberof GetCocktailDraftByIDRequest
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface GetCocktailDraftByIDRequest200Response
 */
export interface GetCocktailDraftByIDRequest200Response {
    /**
     * 
     * @type {GetCocktailDraftByIDResponse}
     * @memberof GetCocktailDraftByIDRequest200Response
     */
    'data': GetCocktailDraftByIDResponse;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraftByIDRequest200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraftByIDRequest200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetCocktailDraftByIDResponse
 */
export interface GetCocktailDraftByIDResponse {
    /**
     * 
     * @type {number}
     * @memberof GetCocktailDraftByIDResponse
     */
    'cocktail_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraftByIDResponse
     */
    'created_date': string;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraftByIDResponse
     */
    'description': string;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInResponse>}
     * @memberof GetCocktailDraftByIDResponse
     */
    'ingredient_list': Array<CocktailIngredientWithoutIDInResponse>;
    /**
     * 
     * @type {Array<CocktailPhotoWithIDInResponse>}
     * @memberof GetCocktailDraftByIDResponse
     */
    'photos': Array<CocktailPhotoWithIDInResponse>;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInResponse>}
     * @memberof GetCocktailDraftByIDResponse
     */
    'step_list': Array<CocktailStepWithoutIDInResponse>;
    /**
     * 
     * @type {string}
     * @memberof GetCocktailDraftByIDResponse
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface GetDraftCocktailListRequest
 */
export interface GetDraftCocktailListRequest {
    /**
     * 
     * @type {number}
     * @memberof GetDraftCocktailListRequest
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetDraftCocktailListRequest
     */
    'page_size': number;
}
/**
 * 
 * @export
 * @interface GetDraftCocktailListResponse
 */
export interface GetDraftCocktailListResponse {
    /**
     * 
     * @type {Array<DraftCocktailList>}
     * @memberof GetDraftCocktailListResponse
     */
    'draft_cocktail_list': Array<DraftCocktailList>;
    /**
     * 
     * @type {number}
     * @memberof GetDraftCocktailListResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface GetOtherCocktailListResponse
 */
export interface GetOtherCocktailListResponse {
    /**
     * 
     * @type {Array<OtherCocktailList>}
     * @memberof GetOtherCocktailListResponse
     */
    'cocktail_list': Array<OtherCocktailList>;
}
/**
 * 
 * @export
 * @interface GetOtherUserFavoriteList200Response
 */
export interface GetOtherUserFavoriteList200Response {
    /**
     * 
     * @type {GetUserFavoriteCocktailListResponse}
     * @memberof GetOtherUserFavoriteList200Response
     */
    'data': GetUserFavoriteCocktailListResponse;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserFavoriteList200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserFavoriteList200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetOtherUserInfo200Response
 */
export interface GetOtherUserInfo200Response {
    /**
     * 
     * @type {GetOtherUserInfoResponse}
     * @memberof GetOtherUserInfo200Response
     */
    'data': GetOtherUserInfoResponse;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserInfo200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserInfo200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GetOtherUserInfoResponse
 */
export interface GetOtherUserInfoResponse {
    /**
     * 座標 [左上XY, 右下XY]
     * @type {Array<Coordinate>}
     * @memberof GetOtherUserInfoResponse
     */
    'coordinate': Array<Coordinate>;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserInfoResponse
     */
    'crop_avatar': string;
    /**
     * 原圖長
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'height': number;
    /**
     * 是否公開收藏 false=不公開, true=公開
     * @type {boolean}
     * @memberof GetOtherUserInfoResponse
     */
    'is_collection_public': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'number_of_collection': number;
    /**
     * 
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'number_of_post': number;
    /**
     * 旋轉角度
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'rotation': number;
    /**
     * 
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetOtherUserInfoResponse
     */
    'user_name': string;
    /**
     * 原圖寬
     * @type {number}
     * @memberof GetOtherUserInfoResponse
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface GetPopularCocktailListRequest
 */
export interface GetPopularCocktailListRequest {
    /**
     * 
     * @type {number}
     * @memberof GetPopularCocktailListRequest
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetPopularCocktailListRequest
     */
    'page_size': number;
}
/**
 * 
 * @export
 * @interface GetPopularCocktailListResponse
 */
export interface GetPopularCocktailListResponse {
    /**
     * 
     * @type {Array<PopularCocktailList>}
     * @memberof GetPopularCocktailListResponse
     */
    'popular_cocktail_list': Array<PopularCocktailList>;
    /**
     * 
     * @type {number}
     * @memberof GetPopularCocktailListResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface GetSelfCocktailListResponse
 */
export interface GetSelfCocktailListResponse {
    /**
     * 
     * @type {Array<SelfCocktailList>}
     * @memberof GetSelfCocktailListResponse
     */
    'cocktail_list': Array<SelfCocktailList>;
}
/**
 * 
 * @export
 * @interface GetUserFavoriteCocktailListResponse
 */
export interface GetUserFavoriteCocktailListResponse {
    /**
     * 
     * @type {Array<FavoriteCocktail>}
     * @memberof GetUserFavoriteCocktailListResponse
     */
    'favorite_cocktail_list': Array<FavoriteCocktail>;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserFavoriteCocktailListResponse
     */
    'is_public': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetUserFavoriteCocktailListResponse
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface GetUserInfoResponse
 */
export interface GetUserInfoResponse {
    /**
     * 座標 [左上XY, 右下XY]
     * @type {Array<Coordinate>}
     * @memberof GetUserInfoResponse
     */
    'coordinate': Array<Coordinate>;
    /**
     * 
     * @type {string}
     * @memberof GetUserInfoResponse
     */
    'crop_avatar': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserInfoResponse
     */
    'email': string;
    /**
     * 原圖長
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'height': number;
    /**
     * 是否公開收藏 false=不公開, true=公開
     * @type {boolean}
     * @memberof GetUserInfoResponse
     */
    'is_collection_public': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'number_of_collection': number;
    /**
     * 
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'number_of_post': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserInfoResponse
     */
    'origin_avatar': string;
    /**
     * 旋轉角度
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'rotation': number;
    /**
     * 
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserInfoResponse
     */
    'user_name': string;
    /**
     * 原圖寬
     * @type {number}
     * @memberof GetUserInfoResponse
     */
    'width': number;
}
/**
 * 
 * @export
 * @interface GoogleAuthenticateRequest
 */
export interface GoogleAuthenticateRequest {
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthenticateRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface GoogleAuthenticateRequest201Response
 */
export interface GoogleAuthenticateRequest201Response {
    /**
     * 
     * @type {GoogleAuthenticateResponse}
     * @memberof GoogleAuthenticateRequest201Response
     */
    'data': GoogleAuthenticateResponse;
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthenticateRequest201Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthenticateRequest201Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface GoogleAuthenticateResponse
 */
export interface GoogleAuthenticateResponse {
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthenticateResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface Info200Response
 */
export interface Info200Response {
    /**
     * 
     * @type {GetUserInfoResponse}
     * @memberof Info200Response
     */
    'data': GetUserInfoResponse;
    /**
     * 
     * @type {string}
     * @memberof Info200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof Info200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
    /**
     * 
     * @type {number}
     * @memberof LogoutRequest
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface OtherCocktailList
 */
export interface OtherCocktailList {
    /**
     * 
     * @type {number}
     * @memberof OtherCocktailList
     */
    'cocktail_id': number;
    /**
     * 
     * @type {boolean}
     * @memberof OtherCocktailList
     */
    'is_collected': boolean;
    /**
     * 
     * @type {string}
     * @memberof OtherCocktailList
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof OtherCocktailList
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof OtherCocktailList
     */
    'user_name': string;
}
/**
 * 
 * @export
 * @interface OtherCocktailList200Response
 */
export interface OtherCocktailList200Response {
    /**
     * 
     * @type {GetOtherCocktailListResponse}
     * @memberof OtherCocktailList200Response
     */
    'data': GetOtherCocktailListResponse;
    /**
     * 
     * @type {string}
     * @memberof OtherCocktailList200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof OtherCocktailList200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface PopularCocktailList
 */
export interface PopularCocktailList {
    /**
     * 
     * @type {number}
     * @memberof PopularCocktailList
     */
    'cocktail_id': number;
    /**
     * 
     * @type {string}
     * @memberof PopularCocktailList
     */
    'created_date': string;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInResponse>}
     * @memberof PopularCocktailList
     */
    'ingredient_list': Array<CocktailIngredientWithoutIDInResponse>;
    /**
     * 
     * @type {boolean}
     * @memberof PopularCocktailList
     */
    'is_collected': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PopularCocktailList
     */
    'low_quality_photos': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PopularCocktailList
     */
    'photos': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PopularCocktailList
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof PopularCocktailList
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof PopularCocktailList
     */
    'user_name': string;
}
/**
 * 
 * @export
 * @interface PostArticleRequest
 */
export interface PostArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof PostArticleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostArticleRequest
     */
    'files'?: Array<string>;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInRequest>}
     * @memberof PostArticleRequest
     */
    'ingredient_list'?: Array<CocktailIngredientWithoutIDInRequest>;
    /**
     * 
     * @type {string}
     * @memberof PostArticleRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInRequest>}
     * @memberof PostArticleRequest
     */
    'step_list'?: Array<CocktailStepWithoutIDInRequest>;
}
/**
 * 
 * @export
 * @interface PostDraftArticleRequest
 */
export interface PostDraftArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof PostDraftArticleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostDraftArticleRequest
     */
    'files'?: Array<string>;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInRequest>}
     * @memberof PostDraftArticleRequest
     */
    'ingredient_list'?: Array<CocktailIngredientWithoutIDInRequest>;
    /**
     * 
     * @type {string}
     * @memberof PostDraftArticleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInRequest>}
     * @memberof PostDraftArticleRequest
     */
    'step_list'?: Array<CocktailStepWithoutIDInRequest>;
}
/**
 * 
 * @export
 * @interface RemoveCollectionArticle200Response
 */
export interface RemoveCollectionArticle200Response {
    /**
     * 
     * @type {DeleteFavoriteCocktailResponse}
     * @memberof RemoveCollectionArticle200Response
     */
    'data': DeleteFavoriteCocktailResponse;
    /**
     * 
     * @type {string}
     * @memberof RemoveCollectionArticle200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof RemoveCollectionArticle200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface ResponseData
 */
export interface ResponseData {
    /**
     * 
     * @type {object}
     * @memberof ResponseData
     */
    'data'?: object;
    /**
     * 
     * @type {string}
     * @memberof ResponseData
     */
    'error_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseData
     */
    'error_message'?: string;
}
/**
 * 
 * @export
 * @interface SelfCocktailList
 */
export interface SelfCocktailList {
    /**
     * 
     * @type {number}
     * @memberof SelfCocktailList
     */
    'cocktail_id': number;
    /**
     * 
     * @type {string}
     * @memberof SelfCocktailList
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof SelfCocktailList
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SelfCocktailList
     */
    'user_name': string;
}
/**
 * 
 * @export
 * @interface SelfCocktailList200Response
 */
export interface SelfCocktailList200Response {
    /**
     * 
     * @type {GetSelfCocktailListResponse}
     * @memberof SelfCocktailList200Response
     */
    'data': GetSelfCocktailListResponse;
    /**
     * 
     * @type {string}
     * @memberof SelfCocktailList200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof SelfCocktailList200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface UpdateDraftArticleRequest
 */
export interface UpdateDraftArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDraftArticleRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInRequest>}
     * @memberof UpdateDraftArticleRequest
     */
    'ingredient_list': Array<CocktailIngredientWithoutIDInRequest>;
    /**
     * 
     * @type {string}
     * @memberof UpdateDraftArticleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<CocktailPhotoWithIDInRequest>}
     * @memberof UpdateDraftArticleRequest
     */
    'photos'?: Array<CocktailPhotoWithIDInRequest>;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInRequest>}
     * @memberof UpdateDraftArticleRequest
     */
    'step_list': Array<CocktailStepWithoutIDInRequest>;
}
/**
 * 
 * @export
 * @interface UpdateFormalArticleRequest
 */
export interface UpdateFormalArticleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateFormalArticleRequest
     */
    'description': string;
    /**
     * 
     * @type {Array<CocktailIngredientWithoutIDInRequest>}
     * @memberof UpdateFormalArticleRequest
     */
    'ingredient_list': Array<CocktailIngredientWithoutIDInRequest>;
    /**
     * 
     * @type {string}
     * @memberof UpdateFormalArticleRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<CocktailPhotoWithIDInRequest>}
     * @memberof UpdateFormalArticleRequest
     */
    'photos'?: Array<CocktailPhotoWithIDInRequest>;
    /**
     * 
     * @type {Array<CocktailStepWithoutIDInRequest>}
     * @memberof UpdateFormalArticleRequest
     */
    'step_list': Array<CocktailStepWithoutIDInRequest>;
}
/**
 * 
 * @export
 * @interface UpdateUserAvatarRequest
 */
export interface UpdateUserAvatarRequest {
    /**
     * 座標 [左上XY, 右下XY]
     * @type {Array<Coordinate>}
     * @memberof UpdateUserAvatarRequest
     */
    'coordinate': Array<Coordinate>;
    /**
     * 裁切後照片
     * @type {string}
     * @memberof UpdateUserAvatarRequest
     */
    'crop_avatar': string;
    /**
     * 原始照片
     * @type {string}
     * @memberof UpdateUserAvatarRequest
     */
    'origin_avatar'?: string;
    /**
     * 旋轉角度
     * @type {number}
     * @memberof UpdateUserAvatarRequest
     */
    'rotation': number;
}
/**
 * 
 * @export
 * @interface UpdateUserAvatarResponse
 */
export interface UpdateUserAvatarResponse {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserAvatarResponse
     */
    'photo': string;
}
/**
 * 
 * @export
 * @interface UpdateUserInfoRequest
 */
export interface UpdateUserInfoRequest {
    /**
     * public user collection post
     * @type {boolean}
     * @memberof UpdateUserInfoRequest
     */
    'is_collection_public'?: boolean;
    /**
     * name for this user
     * @type {string}
     * @memberof UpdateUserInfoRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserInfoRequest200Response
 */
export interface UpdateUserInfoRequest200Response {
    /**
     * 
     * @type {UpdateUserInfoResponse}
     * @memberof UpdateUserInfoRequest200Response
     */
    'data': UpdateUserInfoResponse;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInfoRequest200Response
     */
    'error_code': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInfoRequest200Response
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface UpdateUserInfoResponse
 */
export interface UpdateUserInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserInfoResponse
     */
    'photo': string;
}

/**
 * CocktailApi - axios parameter creator
 * @export
 */
export const CocktailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * DELETE cocktail draft article.
         * @summary DELETE cocktail draft article.
         * @param {DeleteDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftArticleRequest: async (body?: DeleteDraftArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cocktail-drafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DELETE cocktail formal article.
         * @summary DELETE cocktail formal article.
         * @param {DeleteFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormalArticleRequest: async (body?: DeleteFormalArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get popular cocktail list order by create date.
         * @summary Get popular cocktail list
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktail: async (page: number, pageSize: number, keyword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getCocktail', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getCocktail', 'pageSize', pageSize)
            const localVarPath = `/cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get cocktail photo, steps and ingredient.
         * @summary Get cocktail detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailByIDRequest: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCocktailByIDRequest', 'id', id)
            const localVarPath = `/cocktails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get draft cocktail list order by create date.
         * @summary Get draft cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailDraft: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cocktail-drafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get cocktail draft photo, steps and ingredient.
         * @summary Get cocktail draft detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailDraftByIDRequest: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCocktailDraftByIDRequest', 'id', id)
            const localVarPath = `/cocktail-drafts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Make cocktail draft article to formal article.
         * @summary Make cocktail draft article to formal article.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCocktailDraftToFormal: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('makeCocktailDraftToFormal', 'id', id)
            const localVarPath = `/cocktail-drafts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post cocktail article.
         * @summary Post cocktail article.
         * @param {PostArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticleRequest: async (body?: PostArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post cocktail draft article.
         * @summary Post cocktail draft article.
         * @param {PostDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDraftArticleRequest: async (body?: PostDraftArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cocktail-drafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit cocktail draft article.
         * @summary Edit cocktail draft article.
         * @param {number} id 
         * @param {UpdateDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCocktailDraft: async (id: number, body?: UpdateDraftArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCocktailDraft', 'id', id)
            const localVarPath = `/cocktail-drafts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit cocktail formal article.
         * @summary Edit cocktail formal article.
         * @param {number} id 
         * @param {UpdateFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFormalArticle: async (id: number, body?: UpdateFormalArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFormalArticle', 'id', id)
            const localVarPath = `/cocktails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CocktailApi - functional programming interface
 * @export
 */
export const CocktailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CocktailApiAxiosParamCreator(configuration)
    return {
        /**
         * DELETE cocktail draft article.
         * @summary DELETE cocktail draft article.
         * @param {DeleteDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDraftArticleRequest(body?: DeleteDraftArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraftArticleRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DELETE cocktail formal article.
         * @summary DELETE cocktail formal article.
         * @param {DeleteFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFormalArticleRequest(body?: DeleteFormalArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFormalArticleRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get popular cocktail list order by create date.
         * @summary Get popular cocktail list
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCocktail(page: number, pageSize: number, keyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCocktail200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCocktail(page, pageSize, keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get cocktail photo, steps and ingredient.
         * @summary Get cocktail detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCocktailByIDRequest(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCocktailByIDRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCocktailByIDRequest(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get draft cocktail list order by create date.
         * @summary Get draft cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCocktailDraft(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCocktailDraft200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCocktailDraft(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get cocktail draft photo, steps and ingredient.
         * @summary Get cocktail draft detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCocktailDraftByIDRequest(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCocktailDraftByIDRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCocktailDraftByIDRequest(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Make cocktail draft article to formal article.
         * @summary Make cocktail draft article to formal article.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeCocktailDraftToFormal(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeCocktailDraftToFormal(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post cocktail article.
         * @summary Post cocktail article.
         * @param {PostArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postArticleRequest(body?: PostArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postArticleRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Post cocktail draft article.
         * @summary Post cocktail draft article.
         * @param {PostDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDraftArticleRequest(body?: PostDraftArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDraftArticleRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit cocktail draft article.
         * @summary Edit cocktail draft article.
         * @param {number} id 
         * @param {UpdateDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCocktailDraft(id: number, body?: UpdateDraftArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCocktailDraft(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit cocktail formal article.
         * @summary Edit cocktail formal article.
         * @param {number} id 
         * @param {UpdateFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFormalArticle(id: number, body?: UpdateFormalArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFormalArticle(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CocktailApi - factory interface
 * @export
 */
export const CocktailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CocktailApiFp(configuration)
    return {
        /**
         * DELETE cocktail draft article.
         * @summary DELETE cocktail draft article.
         * @param {DeleteDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftArticleRequest(body?: DeleteDraftArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDraftArticleRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * DELETE cocktail formal article.
         * @summary DELETE cocktail formal article.
         * @param {DeleteFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormalArticleRequest(body?: DeleteFormalArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFormalArticleRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get popular cocktail list order by create date.
         * @summary Get popular cocktail list
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [keyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktail(page: number, pageSize: number, keyword?: string, options?: any): AxiosPromise<GetCocktail200Response> {
            return localVarFp.getCocktail(page, pageSize, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * Get cocktail photo, steps and ingredient.
         * @summary Get cocktail detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailByIDRequest(id: number, options?: any): AxiosPromise<GetCocktailByIDRequest200Response> {
            return localVarFp.getCocktailByIDRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get draft cocktail list order by create date.
         * @summary Get draft cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailDraft(options?: any): AxiosPromise<GetCocktailDraft200Response> {
            return localVarFp.getCocktailDraft(options).then((request) => request(axios, basePath));
        },
        /**
         * Get cocktail draft photo, steps and ingredient.
         * @summary Get cocktail draft detail information
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCocktailDraftByIDRequest(id: number, options?: any): AxiosPromise<GetCocktailDraftByIDRequest200Response> {
            return localVarFp.getCocktailDraftByIDRequest(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Make cocktail draft article to formal article.
         * @summary Make cocktail draft article to formal article.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCocktailDraftToFormal(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.makeCocktailDraftToFormal(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Post cocktail article.
         * @summary Post cocktail article.
         * @param {PostArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postArticleRequest(body?: PostArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postArticleRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Post cocktail draft article.
         * @summary Post cocktail draft article.
         * @param {PostDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDraftArticleRequest(body?: PostDraftArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postDraftArticleRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit cocktail draft article.
         * @summary Edit cocktail draft article.
         * @param {number} id 
         * @param {UpdateDraftArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCocktailDraft(id: number, body?: UpdateDraftArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateCocktailDraft(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit cocktail formal article.
         * @summary Edit cocktail formal article.
         * @param {number} id 
         * @param {UpdateFormalArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFormalArticle(id: number, body?: UpdateFormalArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateFormalArticle(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CocktailApi - object-oriented interface
 * @export
 * @class CocktailApi
 * @extends {BaseAPI}
 */
export class CocktailApi extends BaseAPI {
    /**
     * DELETE cocktail draft article.
     * @summary DELETE cocktail draft article.
     * @param {DeleteDraftArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public deleteDraftArticleRequest(body?: DeleteDraftArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).deleteDraftArticleRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DELETE cocktail formal article.
     * @summary DELETE cocktail formal article.
     * @param {DeleteFormalArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public deleteFormalArticleRequest(body?: DeleteFormalArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).deleteFormalArticleRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get popular cocktail list order by create date.
     * @summary Get popular cocktail list
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} [keyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public getCocktail(page: number, pageSize: number, keyword?: string, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).getCocktail(page, pageSize, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get cocktail photo, steps and ingredient.
     * @summary Get cocktail detail information
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public getCocktailByIDRequest(id: number, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).getCocktailByIDRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get draft cocktail list order by create date.
     * @summary Get draft cocktail list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public getCocktailDraft(options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).getCocktailDraft(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get cocktail draft photo, steps and ingredient.
     * @summary Get cocktail draft detail information
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public getCocktailDraftByIDRequest(id: number, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).getCocktailDraftByIDRequest(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Make cocktail draft article to formal article.
     * @summary Make cocktail draft article to formal article.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public makeCocktailDraftToFormal(id: number, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).makeCocktailDraftToFormal(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post cocktail article.
     * @summary Post cocktail article.
     * @param {PostArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public postArticleRequest(body?: PostArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).postArticleRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post cocktail draft article.
     * @summary Post cocktail draft article.
     * @param {PostDraftArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public postDraftArticleRequest(body?: PostDraftArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).postDraftArticleRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit cocktail draft article.
     * @summary Edit cocktail draft article.
     * @param {number} id 
     * @param {UpdateDraftArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public updateCocktailDraft(id: number, body?: UpdateDraftArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).updateCocktailDraft(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit cocktail formal article.
     * @summary Edit cocktail formal article.
     * @param {number} id 
     * @param {UpdateFormalArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CocktailApi
     */
    public updateFormalArticle(id: number, body?: UpdateFormalArticleRequest, options?: AxiosRequestConfig) {
        return CocktailApiFp(this.configuration).updateFormalArticle(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CommandApi - axios parameter creator
 * @export
 */
export const CommandApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Undo command.
         * @summary Undo command.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undoCommand: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('undoCommand', 'id', id)
            const localVarPath = `/command/{id}/undo`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommandApi - functional programming interface
 * @export
 */
export const CommandApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommandApiAxiosParamCreator(configuration)
    return {
        /**
         * Undo command.
         * @summary Undo command.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undoCommand(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.undoCommand(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommandApi - factory interface
 * @export
 */
export const CommandApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommandApiFp(configuration)
    return {
        /**
         * Undo command.
         * @summary Undo command.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undoCommand(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.undoCommand(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommandApi - object-oriented interface
 * @export
 * @class CommandApi
 * @extends {BaseAPI}
 */
export class CommandApi extends BaseAPI {
    /**
     * Undo command.
     * @summary Undo command.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommandApi
     */
    public undoCommand(id: string, options?: AxiosRequestConfig) {
        return CommandApiFp(this.configuration).undoCommand(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use Code to exchange access token.
         * @summary Get access token.
         * @param {GoogleAuthenticateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthenticateRequest: async (body?: GoogleAuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google-authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Will redirect with authorization code.
         * @summary Login with google OAuth2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * make token invalid.
         * @summary User logout.
         * @param {LogoutRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutRequest: async (body?: LogoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * Use Code to exchange access token.
         * @summary Get access token.
         * @param {GoogleAuthenticateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleAuthenticateRequest(body?: GoogleAuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleAuthenticateRequest201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleAuthenticateRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Will redirect with authorization code.
         * @summary Login with google OAuth2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleLogin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleLogin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * make token invalid.
         * @summary User logout.
         * @param {LogoutRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutRequest(body?: LogoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * Use Code to exchange access token.
         * @summary Get access token.
         * @param {GoogleAuthenticateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthenticateRequest(body?: GoogleAuthenticateRequest, options?: any): AxiosPromise<GoogleAuthenticateRequest201Response> {
            return localVarFp.googleAuthenticateRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Will redirect with authorization code.
         * @summary Login with google OAuth2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin(options?: any): AxiosPromise<void> {
            return localVarFp.googleLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * make token invalid.
         * @summary User logout.
         * @param {LogoutRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutRequest(body?: LogoutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.logoutRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * Use Code to exchange access token.
     * @summary Get access token.
     * @param {GoogleAuthenticateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public googleAuthenticateRequest(body?: GoogleAuthenticateRequest, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).googleAuthenticateRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Will redirect with authorization code.
     * @summary Login with google OAuth2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public googleLogin(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).googleLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * make token invalid.
     * @summary User logout.
     * @param {LogoutRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logoutRequest(body?: LogoutRequest, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).logoutRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add cocktail article to favorite list.
         * @summary Add cocktail article to favorite list.
         * @param {CollectArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectArticleRequest: async (body?: CollectArticleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/favorite-cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user avatar.
         * @summary Delete user avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get other user favorite cocktail article list.
         * @summary Get other user favorite cocktail article list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserFavoriteList: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOtherUserFavoriteList', 'id', id)
            const localVarPath = `/users/{id}/favorite-cocktails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get other user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get other user information.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserInfo: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOtherUserInfo', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user favorite cocktail article list.
         * @summary Get current user favorite cocktail article list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFavoriteList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/favorite-cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get other user cocktail list order by create date.
         * @summary Get other user cocktail list
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otherCocktailList: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('otherCocktailList', 'id', id)
            const localVarPath = `/users/{id}/cocktails`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove cocktail article from favorite list.
         * @summary Remove cocktail article from favorite list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCollectionArticle: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeCollectionArticle', 'id', id)
            const localVarPath = `/users/current/favorite-cocktails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get self cocktail list order by create date.
         * @summary Get self cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfCocktailList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/cocktails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit user avatar.
         * @summary Edit user avatar.
         * @param {UpdateUserAvatarRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatarRequest: async (body?: UpdateUserAvatarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit user name and collection of publicity status.
         * @summary Edit user information.
         * @param {UpdateUserInfoRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfoRequest: async (body?: UpdateUserInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Add cocktail article to favorite list.
         * @summary Add cocktail article to favorite list.
         * @param {CollectArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectArticleRequest(body?: CollectArticleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectArticleRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete user avatar.
         * @summary Delete user avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserAvatar(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAvatar(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get other user favorite cocktail article list.
         * @summary Get other user favorite cocktail article list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOtherUserFavoriteList(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOtherUserFavoriteList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOtherUserFavoriteList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get other user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get other user information.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOtherUserInfo(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOtherUserInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOtherUserInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get current user favorite cocktail article list.
         * @summary Get current user favorite cocktail article list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFavoriteList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOtherUserFavoriteList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFavoriteList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get other user cocktail list order by create date.
         * @summary Get other user cocktail list
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otherCocktailList(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherCocktailList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otherCocktailList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove cocktail article from favorite list.
         * @summary Remove cocktail article from favorite list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCollectionArticle(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveCollectionArticle200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCollectionArticle(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get self cocktail list order by create date.
         * @summary Get self cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async selfCocktailList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfCocktailList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.selfCocktailList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit user avatar.
         * @summary Edit user avatar.
         * @param {UpdateUserAvatarRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserAvatarRequest(body?: UpdateUserAvatarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserAvatarRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit user name and collection of publicity status.
         * @summary Edit user information.
         * @param {UpdateUserInfoRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserInfoRequest(body?: UpdateUserInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserInfoRequest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserInfoRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Add cocktail article to favorite list.
         * @summary Add cocktail article to favorite list.
         * @param {CollectArticleRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectArticleRequest(body?: CollectArticleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.collectArticleRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user avatar.
         * @summary Delete user avatar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserAvatar(options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserAvatar(options).then((request) => request(axios, basePath));
        },
        /**
         * Get other user favorite cocktail article list.
         * @summary Get other user favorite cocktail article list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserFavoriteList(id: number, options?: any): AxiosPromise<GetOtherUserFavoriteList200Response> {
            return localVarFp.getOtherUserFavoriteList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get other user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get other user information.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserInfo(id: number, options?: any): AxiosPromise<GetOtherUserInfo200Response> {
            return localVarFp.getOtherUserInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current user favorite cocktail article list.
         * @summary Get current user favorite cocktail article list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFavoriteList(options?: any): AxiosPromise<GetOtherUserFavoriteList200Response> {
            return localVarFp.getUserFavoriteList(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user id, name, email, numberOfPost, numberOfCollection and photo.
         * @summary Get user information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(options?: any): AxiosPromise<Info200Response> {
            return localVarFp.info(options).then((request) => request(axios, basePath));
        },
        /**
         * Get other user cocktail list order by create date.
         * @summary Get other user cocktail list
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otherCocktailList(id: number, options?: any): AxiosPromise<OtherCocktailList200Response> {
            return localVarFp.otherCocktailList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove cocktail article from favorite list.
         * @summary Remove cocktail article from favorite list.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCollectionArticle(id: number, options?: any): AxiosPromise<RemoveCollectionArticle200Response> {
            return localVarFp.removeCollectionArticle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get self cocktail list order by create date.
         * @summary Get self cocktail list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selfCocktailList(options?: any): AxiosPromise<SelfCocktailList200Response> {
            return localVarFp.selfCocktailList(options).then((request) => request(axios, basePath));
        },
        /**
         * Edit user avatar.
         * @summary Edit user avatar.
         * @param {UpdateUserAvatarRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatarRequest(body?: UpdateUserAvatarRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserAvatarRequest(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit user name and collection of publicity status.
         * @summary Edit user information.
         * @param {UpdateUserInfoRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserInfoRequest(body?: UpdateUserInfoRequest, options?: any): AxiosPromise<UpdateUserInfoRequest200Response> {
            return localVarFp.updateUserInfoRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Add cocktail article to favorite list.
     * @summary Add cocktail article to favorite list.
     * @param {CollectArticleRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public collectArticleRequest(body?: CollectArticleRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).collectArticleRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user avatar.
     * @summary Delete user avatar.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserAvatar(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserAvatar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get other user favorite cocktail article list.
     * @summary Get other user favorite cocktail article list.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOtherUserFavoriteList(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOtherUserFavoriteList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get other user id, name, email, numberOfPost, numberOfCollection and photo.
     * @summary Get other user information.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOtherUserInfo(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOtherUserInfo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current user favorite cocktail article list.
     * @summary Get current user favorite cocktail article list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserFavoriteList(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserFavoriteList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user id, name, email, numberOfPost, numberOfCollection and photo.
     * @summary Get user information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public info(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).info(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get other user cocktail list order by create date.
     * @summary Get other user cocktail list
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public otherCocktailList(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).otherCocktailList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove cocktail article from favorite list.
     * @summary Remove cocktail article from favorite list.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public removeCollectionArticle(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).removeCollectionArticle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get self cocktail list order by create date.
     * @summary Get self cocktail list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public selfCocktailList(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).selfCocktailList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit user avatar.
     * @summary Edit user avatar.
     * @param {UpdateUserAvatarRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserAvatarRequest(body?: UpdateUserAvatarRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserAvatarRequest(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit user name and collection of publicity status.
     * @summary Edit user information.
     * @param {UpdateUserInfoRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserInfoRequest(body?: UpdateUserInfoRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserInfoRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
}


